# macros.asm
# Макросы, упрощающие вызов подпрограмм ввода/вывода
# и операций с массивами. Используются во всех модулях программы.
#
.include "io.asm"
.include "array_ops.asm"

.text


# =========================================================
# PRINT_STR(adr)
# ---------------------------------------------------------
# adr — адрес ASCIIZ-строки.
# Помещает адрес строки в стек (12(sp)) и вызывает print_string.
# =========================================================
.macro PRINT_STR(%adr)
    addi    sp, sp, -16
    la      t0, %adr
    sw      t0, 12(sp)
    jal     print_string
    addi    sp, sp, 16
.end_macro


# =========================================================
# READ_INT(reg)
# ---------------------------------------------------------
# Считывает одно целое число с клавиатуры и сохраняет в регистр %reg.
# =========================================================
.macro READ_INT(%reg)
    jal     read_int
    mv      %reg, a0
.end_macro


# =========================================================
# CHECK_N(n_reg, result_reg)
# ---------------------------------------------------------
# Проверяет, что 1 <= N <= 10.
# Возвращает 1 (корректно) или 0 (ошибка) в %result_reg.
# =========================================================
.macro CHECK_N(%n_reg, %result_reg)
    li      t1, 1
    blt     %n_reg, t1, bad
    li      t1, 10
    bgt     %n_reg, t1, bad
    li      %result_reg, 1
    j       end
bad:
    li      %result_reg, 0
end:
.end_macro


# =========================================================
# READ_ARR(Nreg, AdrReg)
# ---------------------------------------------------------
# Передаёт N и адрес массива в стек и вызывает read_array.
# Параметры:
#   12(sp) = N
#    8(sp) = Addr
# =========================================================
.macro READ_ARR(%Nreg, %AdrReg)
    addi    sp, sp, -16
    sw      %Nreg, 12(sp)
    sw      %AdrReg, 8(sp)
    jal     read_array
    addi    sp, sp, 16
.end_macro


# =========================================================
# PRINT_ARR(Nreg, AdrReg)
# ---------------------------------------------------------
# Передаёт N и адрес массива в стек и вызывает print_array.
# =========================================================
.macro PRINT_ARR(%Nreg, %AdrReg)
    addi    sp, sp, -16
    sw      %Nreg, 12(sp)
    sw      %AdrReg, 8(sp)
    jal     print_array
    addi    sp, sp, 16
.end_macro


# =========================================================
# FORM_ARR(Nreg, AaddrReg, BaddrReg, Kreg)
# ---------------------------------------------------------
# Формирует массив B на основе массива A.
# Перед вызовом подпрограммы form_arrayB:
#   12(sp) = N
#    8(sp) = Aaddr
#    4(sp) = Baddr
# После выполнения возвращает в %Kreg количество элементов массива B.
# =========================================================
.macro FORM_ARR(%Nreg, %AaddrReg, %BaddrReg, %Kreg)
    addi    sp, sp, -16
    sw      %Nreg,     12(sp)
    sw      %AaddrReg,  8(sp)
    sw      %BaddrReg,  4(sp)
    jal     form_arrayB
    lw      %Kreg,     12(sp)
    addi    sp, sp, 16
.end_macro


# =========================================================
# PRINT_INT_ADDR(addrReg)
# ---------------------------------------------------------
# Печатает одно число, адрес которого хранится в %addrReg.
# =========================================================
.macro PRINT_INT_ADDR(%addrReg)
    addi    sp, sp, -16
    sw      %addrReg, 12(sp)
    jal     print_int
    addi    sp, sp, 16
.end_macro